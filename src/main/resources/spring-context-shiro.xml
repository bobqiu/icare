<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.0.xsd"
	default-lazy-init="true">

	<description>Shiro Configuration</description>

    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/resthouse.properties" />
	
	<!-- 安全认证过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="${adminPath}/login" />
		<!-- 登录成功后要跳转的连接-->
		<property name="successUrl" value="${adminPath}" />
		<property name="filters">
            <map>
            	<!-- Web Application 过滤器 -->
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <!-- Web Service 过滤器 -->
                <entry key="statelessAuthc" value-ref="statelessAuthcFilter"/>
            </map>
        </property>
        <!-- Shiro连接约束配置,即过滤链的定义 -->   
	    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
    	<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
    	<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
    	<!-- statelessAuthc:无状态过滤器 -->
		<property name="filterChainDefinitions">
			<value>
				/static/** = anon
				/userfiles/** = anon
				${adminPath}/login = authc
				${adminPath}/logout = logout
				${adminPath}/** = user
				/api/** = statelessAuthc
		 	</value>
		</property>
	</bean>
	
	<!-- 定义 Shiro 主要业务对象  ，可以设置自定义的多Realms应用-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- <property name="sessionManager" ref="sessionManager" /> -->
		<property name = "realms">
			<list>
				
				<!-- Web Application Realm -->
				<ref bean = "systemAuthorizingRealm"/>
				
				<!-- Web Service Realm -->
				<ref bean = "statelessRealm"/>
			</list>
		</property>
		<property name="subjectDAO.sessionStorageEvaluator" ref="multiSessionStorageEvaluator"/>  
		<!-- <property name="subjectFactory" ref="subjectFactory"/> -->
		<property name="cacheManager" ref="shiroCacheManager" />
		
		<!-- 一种token只使用一个realm -->
		<property name="authenticator.authenticationStrategy" ref="firstExceptionStrategy"/>
	</bean>
	<!-- 
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">  
	    <property name="globalSessionTimeout" value="3600000" /> 
	    <property name="sessionDAO" ref="sessionDAO"/>
	</bean>

	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean> -->
	
	<!-- 用户授权信息Cache, 采用EhCache -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="cacheManager"/>
	</bean>
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <!-- 配置以下两个bean即可实现此功能 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	
	<!-- stateless Realm实现 -->  
	<bean id="statelessRealm"   
	  class="com.sjtu.icare.modules.sys.utils.security.StatelessRealm">  
	    <property name="cachingEnabled" value="false"/>  
	</bean>  
	
	<!-- Subject工厂 -->  
	<!-- <bean id="subjectFactory"   
	  class="com.sjtu.icare.modules.sys.utils.security.StatelessDefaultSubjectFactory"/>  -->
	
	<!-- stateless Filter --> 
	<bean id="statelessAuthcFilter"   
      class="com.sjtu.icare.modules.sys.utils.security.StatelessAuthcFilter"/>
    
    <!-- 一种token只使用一个realm策略bean --> 
    <bean id="firstExceptionStrategy"   
      class="com.sjtu.icare.modules.sys.utils.security.FirstExceptionStrategy"/>
      
    <bean id="multiSessionStorageEvaluator"
      class="com.sjtu.icare.modules.sys.utils.security.MultiSessionStorageEvaluator"/>
</beans>